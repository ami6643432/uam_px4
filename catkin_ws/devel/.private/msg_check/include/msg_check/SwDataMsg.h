// Generated by gencpp from file msg_check/SwDataMsg.msg
// DO NOT EDIT!


#ifndef MSG_CHECK_MESSAGE_SWDATAMSG_H
#define MSG_CHECK_MESSAGE_SWDATAMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace msg_check
{
template <class ContainerAllocator>
struct SwDataMsg_
{
  typedef SwDataMsg_<ContainerAllocator> Type;

  SwDataMsg_()
    : header()
    , sp()
    , sq()
    , acceleration()
    , angular_acceleration()
    , position_error()
    , velocity_error()
    , position_error_integral()
    , angle_error()
    , angle_rate_error()
    , Kp0_1()
    , Kp1_1()
    , Kp0_2()
    , Kp1_2()
    , Kp0_3()
    , Kp1_3()
    , Kq0_1()
    , Kq1_1()
    , Kq2_1()
    , Kq0_2()
    , Kq1_2()
    , Kq2_2()
    , Kq0_3()
    , Kq1_3()
    , Kq2_3()
    , rho_p0_1()
    , rho_p1_1()
    , rho_p0_2()
    , rho_p1_2()
    , rho_p0_3()
    , rho_p1_3()
    , rho_q0_1()
    , rho_q1_1()
    , rho_q2_1()
    , rho_q0_2()
    , rho_q1_2()
    , rho_q2_2()
    , rho_q0_3()
    , rho_Q1_3()
    , rho_q2_3()
    , zeta_p()
    , zeta_q()
    , delTau_p()
    , delTau_q()
    , moments()
    , thrust(0.0)
    , hatM_1(0.0)
    , hatM_2(0.0)
    , hatM_3(0.0)  {
    }
  SwDataMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sp(_alloc)
    , sq(_alloc)
    , acceleration(_alloc)
    , angular_acceleration(_alloc)
    , position_error(_alloc)
    , velocity_error(_alloc)
    , position_error_integral(_alloc)
    , angle_error(_alloc)
    , angle_rate_error(_alloc)
    , Kp0_1(_alloc)
    , Kp1_1(_alloc)
    , Kp0_2(_alloc)
    , Kp1_2(_alloc)
    , Kp0_3(_alloc)
    , Kp1_3(_alloc)
    , Kq0_1(_alloc)
    , Kq1_1(_alloc)
    , Kq2_1(_alloc)
    , Kq0_2(_alloc)
    , Kq1_2(_alloc)
    , Kq2_2(_alloc)
    , Kq0_3(_alloc)
    , Kq1_3(_alloc)
    , Kq2_3(_alloc)
    , rho_p0_1(_alloc)
    , rho_p1_1(_alloc)
    , rho_p0_2(_alloc)
    , rho_p1_2(_alloc)
    , rho_p0_3(_alloc)
    , rho_p1_3(_alloc)
    , rho_q0_1(_alloc)
    , rho_q1_1(_alloc)
    , rho_q2_1(_alloc)
    , rho_q0_2(_alloc)
    , rho_q1_2(_alloc)
    , rho_q2_2(_alloc)
    , rho_q0_3(_alloc)
    , rho_Q1_3(_alloc)
    , rho_q2_3(_alloc)
    , zeta_p(_alloc)
    , zeta_q(_alloc)
    , delTau_p(_alloc)
    , delTau_q(_alloc)
    , moments(_alloc)
    , thrust(0.0)
    , hatM_1(0.0)
    , hatM_2(0.0)
    , hatM_3(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sp_type;
  _sp_type sp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _sq_type;
  _sq_type sq;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_acceleration_type;
  _angular_acceleration_type angular_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_error_type;
  _position_error_type position_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_error_type;
  _velocity_error_type velocity_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_error_integral_type;
  _position_error_integral_type position_error_integral;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angle_error_type;
  _angle_error_type angle_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angle_rate_error_type;
  _angle_rate_error_type angle_rate_error;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kp0_1_type;
  _Kp0_1_type Kp0_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kp1_1_type;
  _Kp1_1_type Kp1_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kp0_2_type;
  _Kp0_2_type Kp0_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kp1_2_type;
  _Kp1_2_type Kp1_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kp0_3_type;
  _Kp0_3_type Kp0_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kp1_3_type;
  _Kp1_3_type Kp1_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq0_1_type;
  _Kq0_1_type Kq0_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq1_1_type;
  _Kq1_1_type Kq1_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq2_1_type;
  _Kq2_1_type Kq2_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq0_2_type;
  _Kq0_2_type Kq0_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq1_2_type;
  _Kq1_2_type Kq1_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq2_2_type;
  _Kq2_2_type Kq2_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq0_3_type;
  _Kq0_3_type Kq0_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq1_3_type;
  _Kq1_3_type Kq1_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Kq2_3_type;
  _Kq2_3_type Kq2_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_p0_1_type;
  _rho_p0_1_type rho_p0_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_p1_1_type;
  _rho_p1_1_type rho_p1_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_p0_2_type;
  _rho_p0_2_type rho_p0_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_p1_2_type;
  _rho_p1_2_type rho_p1_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_p0_3_type;
  _rho_p0_3_type rho_p0_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_p1_3_type;
  _rho_p1_3_type rho_p1_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q0_1_type;
  _rho_q0_1_type rho_q0_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q1_1_type;
  _rho_q1_1_type rho_q1_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q2_1_type;
  _rho_q2_1_type rho_q2_1;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q0_2_type;
  _rho_q0_2_type rho_q0_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q1_2_type;
  _rho_q1_2_type rho_q1_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q2_2_type;
  _rho_q2_2_type rho_q2_2;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q0_3_type;
  _rho_q0_3_type rho_q0_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_Q1_3_type;
  _rho_Q1_3_type rho_Q1_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rho_q2_3_type;
  _rho_q2_3_type rho_q2_3;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _zeta_p_type;
  _zeta_p_type zeta_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _zeta_q_type;
  _zeta_q_type zeta_q;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _delTau_p_type;
  _delTau_p_type delTau_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _delTau_q_type;
  _delTau_q_type delTau_q;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _moments_type;
  _moments_type moments;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef double _hatM_1_type;
  _hatM_1_type hatM_1;

   typedef double _hatM_2_type;
  _hatM_2_type hatM_2;

   typedef double _hatM_3_type;
  _hatM_3_type hatM_3;





  typedef boost::shared_ptr< ::msg_check::SwDataMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_check::SwDataMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SwDataMsg_

typedef ::msg_check::SwDataMsg_<std::allocator<void> > SwDataMsg;

typedef boost::shared_ptr< ::msg_check::SwDataMsg > SwDataMsgPtr;
typedef boost::shared_ptr< ::msg_check::SwDataMsg const> SwDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_check::SwDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_check::SwDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_check::SwDataMsg_<ContainerAllocator1> & lhs, const ::msg_check::SwDataMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sp == rhs.sp &&
    lhs.sq == rhs.sq &&
    lhs.acceleration == rhs.acceleration &&
    lhs.angular_acceleration == rhs.angular_acceleration &&
    lhs.position_error == rhs.position_error &&
    lhs.velocity_error == rhs.velocity_error &&
    lhs.position_error_integral == rhs.position_error_integral &&
    lhs.angle_error == rhs.angle_error &&
    lhs.angle_rate_error == rhs.angle_rate_error &&
    lhs.Kp0_1 == rhs.Kp0_1 &&
    lhs.Kp1_1 == rhs.Kp1_1 &&
    lhs.Kp0_2 == rhs.Kp0_2 &&
    lhs.Kp1_2 == rhs.Kp1_2 &&
    lhs.Kp0_3 == rhs.Kp0_3 &&
    lhs.Kp1_3 == rhs.Kp1_3 &&
    lhs.Kq0_1 == rhs.Kq0_1 &&
    lhs.Kq1_1 == rhs.Kq1_1 &&
    lhs.Kq2_1 == rhs.Kq2_1 &&
    lhs.Kq0_2 == rhs.Kq0_2 &&
    lhs.Kq1_2 == rhs.Kq1_2 &&
    lhs.Kq2_2 == rhs.Kq2_2 &&
    lhs.Kq0_3 == rhs.Kq0_3 &&
    lhs.Kq1_3 == rhs.Kq1_3 &&
    lhs.Kq2_3 == rhs.Kq2_3 &&
    lhs.rho_p0_1 == rhs.rho_p0_1 &&
    lhs.rho_p1_1 == rhs.rho_p1_1 &&
    lhs.rho_p0_2 == rhs.rho_p0_2 &&
    lhs.rho_p1_2 == rhs.rho_p1_2 &&
    lhs.rho_p0_3 == rhs.rho_p0_3 &&
    lhs.rho_p1_3 == rhs.rho_p1_3 &&
    lhs.rho_q0_1 == rhs.rho_q0_1 &&
    lhs.rho_q1_1 == rhs.rho_q1_1 &&
    lhs.rho_q2_1 == rhs.rho_q2_1 &&
    lhs.rho_q0_2 == rhs.rho_q0_2 &&
    lhs.rho_q1_2 == rhs.rho_q1_2 &&
    lhs.rho_q2_2 == rhs.rho_q2_2 &&
    lhs.rho_q0_3 == rhs.rho_q0_3 &&
    lhs.rho_Q1_3 == rhs.rho_Q1_3 &&
    lhs.rho_q2_3 == rhs.rho_q2_3 &&
    lhs.zeta_p == rhs.zeta_p &&
    lhs.zeta_q == rhs.zeta_q &&
    lhs.delTau_p == rhs.delTau_p &&
    lhs.delTau_q == rhs.delTau_q &&
    lhs.moments == rhs.moments &&
    lhs.thrust == rhs.thrust &&
    lhs.hatM_1 == rhs.hatM_1 &&
    lhs.hatM_2 == rhs.hatM_2 &&
    lhs.hatM_3 == rhs.hatM_3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_check::SwDataMsg_<ContainerAllocator1> & lhs, const ::msg_check::SwDataMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_check

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_check::SwDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_check::SwDataMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_check::SwDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_check::SwDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_check::SwDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_check::SwDataMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_check::SwDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da1fe80469bc6c23b275683797085357";
  }

  static const char* value(const ::msg_check::SwDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda1fe80469bc6c23ULL;
  static const uint64_t static_value2 = 0xb275683797085357ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_check::SwDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_check/SwDataMsg";
  }

  static const char* value(const ::msg_check::SwDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_check::SwDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Vector3 sp\n"
"geometry_msgs/Vector3 sq\n"
"geometry_msgs/Vector3 acceleration\n"
"geometry_msgs/Vector3 angular_acceleration\n"
"geometry_msgs/Vector3 position_error\n"
"geometry_msgs/Vector3 velocity_error\n"
"geometry_msgs/Vector3 position_error_integral\n"
"geometry_msgs/Vector3 angle_error\n"
"geometry_msgs/Vector3 angle_rate_error\n"
"geometry_msgs/Vector3 Kp0_1\n"
"geometry_msgs/Vector3 Kp1_1\n"
"geometry_msgs/Vector3 Kp0_2\n"
"geometry_msgs/Vector3 Kp1_2\n"
"geometry_msgs/Vector3 Kp0_3\n"
"geometry_msgs/Vector3 Kp1_3\n"
"geometry_msgs/Vector3 Kq0_1\n"
"geometry_msgs/Vector3 Kq1_1\n"
"geometry_msgs/Vector3 Kq2_1\n"
"geometry_msgs/Vector3 Kq0_2\n"
"geometry_msgs/Vector3 Kq1_2\n"
"geometry_msgs/Vector3 Kq2_2\n"
"geometry_msgs/Vector3 Kq0_3\n"
"geometry_msgs/Vector3 Kq1_3\n"
"geometry_msgs/Vector3 Kq2_3\n"
"geometry_msgs/Vector3 rho_p0_1\n"
"geometry_msgs/Vector3 rho_p1_1\n"
"geometry_msgs/Vector3 rho_p0_2\n"
"geometry_msgs/Vector3 rho_p1_2\n"
"geometry_msgs/Vector3 rho_p0_3\n"
"geometry_msgs/Vector3 rho_p1_3\n"
"geometry_msgs/Vector3 rho_q0_1\n"
"geometry_msgs/Vector3 rho_q1_1\n"
"geometry_msgs/Vector3 rho_q2_1\n"
"geometry_msgs/Vector3 rho_q0_2\n"
"geometry_msgs/Vector3 rho_q1_2\n"
"geometry_msgs/Vector3 rho_q2_2\n"
"geometry_msgs/Vector3 rho_q0_3\n"
"geometry_msgs/Vector3 rho_Q1_3\n"
"geometry_msgs/Vector3 rho_q2_3\n"
"geometry_msgs/Vector3 zeta_p\n"
"geometry_msgs/Vector3 zeta_q\n"
"geometry_msgs/Vector3 delTau_p\n"
"geometry_msgs/Vector3 delTau_q\n"
"geometry_msgs/Vector3 moments\n"
"float64 thrust\n"
"float64 hatM_1\n"
"float64 hatM_2\n"
"float64 hatM_3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msg_check::SwDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_check::SwDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sp);
      stream.next(m.sq);
      stream.next(m.acceleration);
      stream.next(m.angular_acceleration);
      stream.next(m.position_error);
      stream.next(m.velocity_error);
      stream.next(m.position_error_integral);
      stream.next(m.angle_error);
      stream.next(m.angle_rate_error);
      stream.next(m.Kp0_1);
      stream.next(m.Kp1_1);
      stream.next(m.Kp0_2);
      stream.next(m.Kp1_2);
      stream.next(m.Kp0_3);
      stream.next(m.Kp1_3);
      stream.next(m.Kq0_1);
      stream.next(m.Kq1_1);
      stream.next(m.Kq2_1);
      stream.next(m.Kq0_2);
      stream.next(m.Kq1_2);
      stream.next(m.Kq2_2);
      stream.next(m.Kq0_3);
      stream.next(m.Kq1_3);
      stream.next(m.Kq2_3);
      stream.next(m.rho_p0_1);
      stream.next(m.rho_p1_1);
      stream.next(m.rho_p0_2);
      stream.next(m.rho_p1_2);
      stream.next(m.rho_p0_3);
      stream.next(m.rho_p1_3);
      stream.next(m.rho_q0_1);
      stream.next(m.rho_q1_1);
      stream.next(m.rho_q2_1);
      stream.next(m.rho_q0_2);
      stream.next(m.rho_q1_2);
      stream.next(m.rho_q2_2);
      stream.next(m.rho_q0_3);
      stream.next(m.rho_Q1_3);
      stream.next(m.rho_q2_3);
      stream.next(m.zeta_p);
      stream.next(m.zeta_q);
      stream.next(m.delTau_p);
      stream.next(m.delTau_q);
      stream.next(m.moments);
      stream.next(m.thrust);
      stream.next(m.hatM_1);
      stream.next(m.hatM_2);
      stream.next(m.hatM_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwDataMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_check::SwDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_check::SwDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sp);
    s << indent << "sq: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.sq);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "angular_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_acceleration);
    s << indent << "position_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_error);
    s << indent << "velocity_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_error);
    s << indent << "position_error_integral: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_error_integral);
    s << indent << "angle_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angle_error);
    s << indent << "angle_rate_error: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angle_rate_error);
    s << indent << "Kp0_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kp0_1);
    s << indent << "Kp1_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kp1_1);
    s << indent << "Kp0_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kp0_2);
    s << indent << "Kp1_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kp1_2);
    s << indent << "Kp0_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kp0_3);
    s << indent << "Kp1_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kp1_3);
    s << indent << "Kq0_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq0_1);
    s << indent << "Kq1_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq1_1);
    s << indent << "Kq2_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq2_1);
    s << indent << "Kq0_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq0_2);
    s << indent << "Kq1_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq1_2);
    s << indent << "Kq2_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq2_2);
    s << indent << "Kq0_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq0_3);
    s << indent << "Kq1_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq1_3);
    s << indent << "Kq2_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Kq2_3);
    s << indent << "rho_p0_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_p0_1);
    s << indent << "rho_p1_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_p1_1);
    s << indent << "rho_p0_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_p0_2);
    s << indent << "rho_p1_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_p1_2);
    s << indent << "rho_p0_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_p0_3);
    s << indent << "rho_p1_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_p1_3);
    s << indent << "rho_q0_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q0_1);
    s << indent << "rho_q1_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q1_1);
    s << indent << "rho_q2_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q2_1);
    s << indent << "rho_q0_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q0_2);
    s << indent << "rho_q1_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q1_2);
    s << indent << "rho_q2_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q2_2);
    s << indent << "rho_q0_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q0_3);
    s << indent << "rho_Q1_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_Q1_3);
    s << indent << "rho_q2_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rho_q2_3);
    s << indent << "zeta_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.zeta_p);
    s << indent << "zeta_q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.zeta_q);
    s << indent << "delTau_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.delTau_p);
    s << indent << "delTau_q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.delTau_q);
    s << indent << "moments: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.moments);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "hatM_1: ";
    Printer<double>::stream(s, indent + "  ", v.hatM_1);
    s << indent << "hatM_2: ";
    Printer<double>::stream(s, indent + "  ", v.hatM_2);
    s << indent << "hatM_3: ";
    Printer<double>::stream(s, indent + "  ", v.hatM_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_CHECK_MESSAGE_SWDATAMSG_H
