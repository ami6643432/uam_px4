# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_check/PlotDataMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PlotDataMsg(genpy.Message):
  _md5sum = "0d96fc0f4d709ad5a1e1b4d1fe446936"
  _type = "msg_check/PlotDataMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

geometry_msgs/Vector3 curpos
geometry_msgs/Vector3 despos

geometry_msgs/Vector3 curvel
geometry_msgs/Vector3 desvel

geometry_msgs/Vector3 curacc
geometry_msgs/Vector3 desacc

geometry_msgs/Vector3 poserr
geometry_msgs/Vector3 velerr

geometry_msgs/Quaternion curor
geometry_msgs/Quaternion desor

float64 thrust
float64 M1_pos_err
float64 M2_pos_err
float64 M1_vel_err
float64 M2_vel_err


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','curpos','despos','curvel','desvel','curacc','desacc','poserr','velerr','curor','desor','thrust','M1_pos_err','M2_pos_err','M1_vel_err','M2_vel_err']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Quaternion','geometry_msgs/Quaternion','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,curpos,despos,curvel,desvel,curacc,desacc,poserr,velerr,curor,desor,thrust,M1_pos_err,M2_pos_err,M1_vel_err,M2_vel_err

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlotDataMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curpos is None:
        self.curpos = geometry_msgs.msg.Vector3()
      if self.despos is None:
        self.despos = geometry_msgs.msg.Vector3()
      if self.curvel is None:
        self.curvel = geometry_msgs.msg.Vector3()
      if self.desvel is None:
        self.desvel = geometry_msgs.msg.Vector3()
      if self.curacc is None:
        self.curacc = geometry_msgs.msg.Vector3()
      if self.desacc is None:
        self.desacc = geometry_msgs.msg.Vector3()
      if self.poserr is None:
        self.poserr = geometry_msgs.msg.Vector3()
      if self.velerr is None:
        self.velerr = geometry_msgs.msg.Vector3()
      if self.curor is None:
        self.curor = geometry_msgs.msg.Quaternion()
      if self.desor is None:
        self.desor = geometry_msgs.msg.Quaternion()
      if self.thrust is None:
        self.thrust = 0.
      if self.M1_pos_err is None:
        self.M1_pos_err = 0.
      if self.M2_pos_err is None:
        self.M2_pos_err = 0.
      if self.M1_vel_err is None:
        self.M1_vel_err = 0.
      if self.M2_vel_err is None:
        self.M2_vel_err = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.curpos = geometry_msgs.msg.Vector3()
      self.despos = geometry_msgs.msg.Vector3()
      self.curvel = geometry_msgs.msg.Vector3()
      self.desvel = geometry_msgs.msg.Vector3()
      self.curacc = geometry_msgs.msg.Vector3()
      self.desacc = geometry_msgs.msg.Vector3()
      self.poserr = geometry_msgs.msg.Vector3()
      self.velerr = geometry_msgs.msg.Vector3()
      self.curor = geometry_msgs.msg.Quaternion()
      self.desor = geometry_msgs.msg.Quaternion()
      self.thrust = 0.
      self.M1_pos_err = 0.
      self.M2_pos_err = 0.
      self.M1_vel_err = 0.
      self.M2_vel_err = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_37d().pack(_x.curpos.x, _x.curpos.y, _x.curpos.z, _x.despos.x, _x.despos.y, _x.despos.z, _x.curvel.x, _x.curvel.y, _x.curvel.z, _x.desvel.x, _x.desvel.y, _x.desvel.z, _x.curacc.x, _x.curacc.y, _x.curacc.z, _x.desacc.x, _x.desacc.y, _x.desacc.z, _x.poserr.x, _x.poserr.y, _x.poserr.z, _x.velerr.x, _x.velerr.y, _x.velerr.z, _x.curor.x, _x.curor.y, _x.curor.z, _x.curor.w, _x.desor.x, _x.desor.y, _x.desor.z, _x.desor.w, _x.thrust, _x.M1_pos_err, _x.M2_pos_err, _x.M1_vel_err, _x.M2_vel_err))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curpos is None:
        self.curpos = geometry_msgs.msg.Vector3()
      if self.despos is None:
        self.despos = geometry_msgs.msg.Vector3()
      if self.curvel is None:
        self.curvel = geometry_msgs.msg.Vector3()
      if self.desvel is None:
        self.desvel = geometry_msgs.msg.Vector3()
      if self.curacc is None:
        self.curacc = geometry_msgs.msg.Vector3()
      if self.desacc is None:
        self.desacc = geometry_msgs.msg.Vector3()
      if self.poserr is None:
        self.poserr = geometry_msgs.msg.Vector3()
      if self.velerr is None:
        self.velerr = geometry_msgs.msg.Vector3()
      if self.curor is None:
        self.curor = geometry_msgs.msg.Quaternion()
      if self.desor is None:
        self.desor = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 296
      (_x.curpos.x, _x.curpos.y, _x.curpos.z, _x.despos.x, _x.despos.y, _x.despos.z, _x.curvel.x, _x.curvel.y, _x.curvel.z, _x.desvel.x, _x.desvel.y, _x.desvel.z, _x.curacc.x, _x.curacc.y, _x.curacc.z, _x.desacc.x, _x.desacc.y, _x.desacc.z, _x.poserr.x, _x.poserr.y, _x.poserr.z, _x.velerr.x, _x.velerr.y, _x.velerr.z, _x.curor.x, _x.curor.y, _x.curor.z, _x.curor.w, _x.desor.x, _x.desor.y, _x.desor.z, _x.desor.w, _x.thrust, _x.M1_pos_err, _x.M2_pos_err, _x.M1_vel_err, _x.M2_vel_err,) = _get_struct_37d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_37d().pack(_x.curpos.x, _x.curpos.y, _x.curpos.z, _x.despos.x, _x.despos.y, _x.despos.z, _x.curvel.x, _x.curvel.y, _x.curvel.z, _x.desvel.x, _x.desvel.y, _x.desvel.z, _x.curacc.x, _x.curacc.y, _x.curacc.z, _x.desacc.x, _x.desacc.y, _x.desacc.z, _x.poserr.x, _x.poserr.y, _x.poserr.z, _x.velerr.x, _x.velerr.y, _x.velerr.z, _x.curor.x, _x.curor.y, _x.curor.z, _x.curor.w, _x.desor.x, _x.desor.y, _x.desor.z, _x.desor.w, _x.thrust, _x.M1_pos_err, _x.M2_pos_err, _x.M1_vel_err, _x.M2_vel_err))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.curpos is None:
        self.curpos = geometry_msgs.msg.Vector3()
      if self.despos is None:
        self.despos = geometry_msgs.msg.Vector3()
      if self.curvel is None:
        self.curvel = geometry_msgs.msg.Vector3()
      if self.desvel is None:
        self.desvel = geometry_msgs.msg.Vector3()
      if self.curacc is None:
        self.curacc = geometry_msgs.msg.Vector3()
      if self.desacc is None:
        self.desacc = geometry_msgs.msg.Vector3()
      if self.poserr is None:
        self.poserr = geometry_msgs.msg.Vector3()
      if self.velerr is None:
        self.velerr = geometry_msgs.msg.Vector3()
      if self.curor is None:
        self.curor = geometry_msgs.msg.Quaternion()
      if self.desor is None:
        self.desor = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 296
      (_x.curpos.x, _x.curpos.y, _x.curpos.z, _x.despos.x, _x.despos.y, _x.despos.z, _x.curvel.x, _x.curvel.y, _x.curvel.z, _x.desvel.x, _x.desvel.y, _x.desvel.z, _x.curacc.x, _x.curacc.y, _x.curacc.z, _x.desacc.x, _x.desacc.y, _x.desacc.z, _x.poserr.x, _x.poserr.y, _x.poserr.z, _x.velerr.x, _x.velerr.y, _x.velerr.z, _x.curor.x, _x.curor.y, _x.curor.z, _x.curor.w, _x.desor.x, _x.desor.y, _x.desor.z, _x.desor.w, _x.thrust, _x.M1_pos_err, _x.M2_pos_err, _x.M1_vel_err, _x.M2_vel_err,) = _get_struct_37d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_37d = None
def _get_struct_37d():
    global _struct_37d
    if _struct_37d is None:
        _struct_37d = struct.Struct("<37d")
    return _struct_37d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
